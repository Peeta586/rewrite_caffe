//指定protobuf语法版本
syntax = "proto2";

//包名
package caffe;

// specifies the shape (dimensions) of a blob.
message BlobShape{
    repeated int64 dim = 1 [packed = true];
}

message BlobProto {
    optional BlobShape shape = 7;
    repeated float data = 5 [packed = true];
    repeated float diff = 6 [packed = true];
    repeated double double_data = 8 [packed = true];
    repeated double double_diff = 9 [packed = true];

    // 4D dimensions -- deprecated. Use "shape" instead.
    optional int32 num = 1 [default = 0];
    optional int32 channels = 2 [default = 0];
    optional int32 height = 3 [default = 0];
    optional int32 width = 4 [default = 0];
}

message PoolingParameter {
    enum PoolMethod {
        MAX = 0;
        AVE = 1;
        STOCHASTIC = 2;
    }
    optional PoolMethod pool = 1 [default = MAX]; // pooling method
    // Pad, kernel size, and stride are all given as a single value for equal
    // dimensions in height and width or as Y, X pairs.
    optional uint32 pad = 4 [default = 0]; // padding size (equal in Y,X (H,W))
    optional uint32 pad_h = 9 [default=0];
    optional uint32 pad_w = 10 [default = 0];
    optional uint32 kernel_size = 2; // The kernel size (square)
    optional uint32 kernel_h = 5;
    optional uint32 kernel_w = 6;
    optional uint32 stride = 3 [default = 1];
    optional uint32 stride_h = 7;
    optional uint32 stride_w = 8;
    enum Engine {
        DEFAULT = 0;
        CAFFE = 1;
        CUDNN = 2;
    }
    optional Engine engine = 11 [default = DEFAULT];
    // If global_pooling then it will pool over the size of the bottom by doing
    // kernel_h = bottom->height and kernel_w = bottom->width
    optional bool global_pooling = 12 [default = false];
    // How to calculate the output size - using ceil (default) or floor rounding.
    enum RoundMode {
        CEIL = 0;
        FLOOR = 1;
    }
    optional RoundMode round_mode = 13 [default = CEIL];
}

message FillerParameter {
    // the filler type
    optional string type = 1 [default = 'constant'];
    optional float value = 2 [default = 0];  // for constant filler
    optional float min = 3 [default = 0]; // for uniform filler
    optional float max = 4 [default = 1]; // for uniform filler
    optional float mean = 5 [default = 0]; // mean value in Gaussian filler
    optional float std = 6 [default = 1]; // std value in Gaussion filler

    // The expected number of non-zero output weights for a given input in
    // Gaussian filler -- the default -1 means don't perform sparsification.
    optional int32 sparse = 7 [default = -1];
    // 用于xavier 初始化等方法
    enum VarianceNorm {
        FAN_IN = 0;
        FAN_OUT = 1;
        AVERAGE = 2;
    }
    optional VarianceNorm variance_norm = 8 [default = FAN_IN];

}